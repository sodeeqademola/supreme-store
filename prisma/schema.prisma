// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id") @db.String
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
  reviews   Review[]

  role Role @default(USER)
}

model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  images      Images[]
  review      Review[]
  quantity    Int?     @default(1)

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
}

type Images {
  color     String
  colorCode String?
  image     String
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String   @db.ObjectId
  rating    Int
  comment   String
  products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.String
}

enum Role {
  USER
  ADMIN
}

model Order {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  paymentIntentId String    @unique
  products        Product[]
  address         Address?

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.String
}

type Address {
  city    String
  country String
  line1   String
  line2   String
}

type Product {
  color      String
  id         String
  imageIndex Int
  imageUrl   String
  name       String
  price      Float
  quantity   Int
}
